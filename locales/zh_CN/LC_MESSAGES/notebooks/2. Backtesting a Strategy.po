# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Edward West
# This file is distributed under the same license as the PyBroker package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyBroker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-02 22:52-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:9 a
#: b655aea9149a4ec3bf23b32017338a23
msgid "Backtesting a Strategy"
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:11 a
#: a50ee15646e6460eb43c068d0743c2c2
msgid ""
"We’re all set to test a basic trading strategy using **PyBroker**! To get"
" started, we’ll import the necessary classes listed below:"
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:60 a
#: e2061b4634304388a1cf29a54494f771
msgid ""
"For our backtest, we’ll be using `Yahoo Finance "
"<https://finance.yahoo.com>`__ as our `DataSource "
"<https://www.pybroker.com/en/latest/reference/pybroker.data.html#pybroker.data.DataSource>`__."
" We’ll also be using data source caching to ensure that we only download "
"the necessary data once when we run our backtests."
msgstr ""

#: ../../docs/source/notebooks/2. 34a05282f9bd41668758912a8347c922 Backtesting
#: Strategy.ipynb:62 a
msgid ""
"The next step is to set up a new instance of the `Strategy "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy>`__"
" class which will be used to perform a backtest on our trading strategy. "
"Here’s how you can do it:"
msgstr ""

#: ../../docs/source/notebooks/2. 7cceb83ac2c74d21aacf8272f39edd4d Backtesting
#: Strategy.ipynb:64 a
msgid ""
"First, you can create a `StrategyConfig "
"<https://www.pybroker.com/en/latest/reference/pybroker.config.html#pybroker.config.StrategyConfig>`__"
" object to configure the ``Strategy``. In this case, we’re setting the "
"initial cash to ``500,000``:"
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:85 a
#: ed75e86dc5624f47abdc9225e2089010
msgid ""
"Then, you can create a new instance of the ``Strategy`` class by passing "
"in the following arguments:"
msgstr ""

#: ../../docs/source/notebooks/2. 9dd276ea32e24f40a2153e4fe0231c7a Backtesting
#: Strategy.ipynb:87 a
msgid "A data source: In this case, we’re using Yahoo Finance as the data source."
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:88 a
#: c77056f9f54c486fac808226e981ca3e
msgid "A start date: This is the starting date for the backtest."
msgstr ""

#: ../../docs/source/notebooks/2. 3dc61fff40884cfba1352c0c2b35c7aa Backtesting
#: Strategy.ipynb:89 a
msgid "An end date: This is the end date for the backtest."
msgstr ""

#: ../../docs/source/notebooks/2. 292009b9bd6d42e38c912a2563e1e404 Backtesting
#: Strategy.ipynb:90 a
msgid "The configuration object created earlier."
msgstr ""

#: ../../docs/source/notebooks/2. 9c297b64b599409a916f3f5f93873412 Backtesting
#: Strategy.ipynb:111 a
msgid ""
"The ``Strategy`` instance is now ready to download data from Yahoo "
"Finance for the period between March 1, 2017, and March 1, 2022, before "
"running the backtest using the specified configuration options. If you "
"need to modify other configuration options, you can refer to the "
"`StrategyConfig reference documentation "
"<https://www.pybroker.com/en/latest/reference/pybroker.config.html#pybroker.config.StrategyConfig>`__."
msgstr ""

#: ../../docs/source/notebooks/2. 6d19c1fa70f5476399569d15e3efba3f Backtesting
#: Strategy.ipynb:114 a
msgid "Defining Strategy Rules"
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:116 a
#: d21984320a6f4ae9958ae0a00b6a2f13
msgid ""
"In this section, you will learn how to implement a basic trading strategy"
" in **PyBroker** with the following rules:"
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:118 a
#: da1927284bec43d894bd03212c38010b
msgid ""
"Buy shares in a stock if the last close price is less than the low of the"
" previous bar and there is no open long position in that stock."
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:119 a
#: f9c6372311ff40598215745c606434a2
msgid ""
"Set the limit price of the buy order to 0.01 less than the last close "
"price."
msgstr ""

#: ../../docs/source/notebooks/2. 8f997a42838e41fab6c9b0fc7dbffdd8 Backtesting
#: Strategy.ipynb:120 a
msgid "Hold the position for 3 days before liquidating it at market price."
msgstr ""

#: ../../docs/source/notebooks/2. 84914f825e8d48249d382cd8874c1761 Backtesting
#: Strategy.ipynb:121 a
#, python-format
msgid ""
"Trade the rules on AAPL and MSFT, allocating up to 25% of the portfolio "
"to each."
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:123 a
#: b02fa585e4c84c7a889fa2560c56b5e4
msgid ""
"To accomplish this, you will define a ``buy_low`` function that "
"**PyBroker** will call separately for AAPL and MSFT on every bar of data."
" Each bar corresponds to a single day of data:"
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:156 a
#: f988591bb386452dac43f44f47c66439
msgid ""
"That is a lot to unpack! The ``buy_low`` function will receive an "
"`ExecContext "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext>`__"
" (``ctx``) containing data for the current ticker symbol (AAPL or MSFT). "
"The ``ExecContext`` will contain all of the close prices up until the "
"most recent bar of the current ticker symbol. The latest close price is "
"retrieved with ``ctx.close[-1]``."
msgstr ""

#: ../../docs/source/notebooks/2. 0b1b165fc64f489cbf2863ce72d445e2 Backtesting
#: Strategy.ipynb:158 a
#, python-format
msgid ""
"The ``buy_low`` function will use the ``ExecContext`` to place a buy "
"order. The number of shares to purchase is set using `ctx.buy_shares "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.buy_shares>`__,"
" which is calculated with `ctx.calc_target_shares "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.calc_target_shares>`__."
" In this case, the number of shares to buy will be equal to 25% of the "
"portfolio."
msgstr ""

#: ../../docs/source/notebooks/2. 3e5c81a69d7b418c9e7bb8d78c994d18 Backtesting
#: Strategy.ipynb:161 a
msgid ""
"The limit price of the order is set with `buy_limit_price "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.buy_limit_price>`__."
" If the criteria are met, the buy order will be filled on the next bar. "
"The time at which the order is filled can be configured with "
"`StrategyConfig.buy_delay "
"<https://www.pybroker.com/en/latest/reference/pybroker.config.html#pybroker.config.StrategyConfig.buy_delay>`__,"
" and its fill price can be set with `ExecContext.buy_fill_price "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.buy_fill_price>`__."
" By default, buy orders are filled on the next bar (``buy_delay=1``) and "
"at a `fill price equal to the midpoint between that bar’s open and close "
"price "
"<https://www.pybroker.com/en/latest/reference/pybroker.common.html#pybroker.common.PriceType.MIDDLE>`__."
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:164 a
#: cade6662c6d74a668d2cd08e60627d57
msgid ""
"Finally, `ctx.hold_bars "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.hold_bars>`__"
" specifies how many bars to hold the position for before liquidating it. "
"When liquidated, the shares are sold at market price equal to "
"`ExecContext.sell_fill_price "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.sell_fill_price>`__,"
" which is configurable and defaults to the midpoint between the bar’s "
"open and close price."
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:167 a
#: cbf56149e4fc491cb751cdfa0960580a
msgid ""
"To add the ``buy_low`` rules to the ``Strategy`` for AAPL and MSFT, you "
"will use `add_execution "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy.add_execution>`__:"
msgstr ""

#: ../../docs/source/notebooks/2. 0f32ac33e9d1441898e5deeffd5f6546 Backtesting
#: Strategy.ipynb:189 a
msgid "Adding a Second Execution"
msgstr ""

#: ../../docs/source/notebooks/2. 9ac13bd7c009495c9b9dd89236f0dded Backtesting
#: Strategy.ipynb:191 a
msgid ""
"You can use different sets of trading rules for different tickers within "
"the same ``Strategy`` instance. In other words, you are not restricted to"
" using only one set of trading rules for a single group of tickers."
msgstr ""

#: ../../docs/source/notebooks/2. 61fd1ca1e8944133b9f47633384e1f66 Backtesting
#: Strategy.ipynb:193 a
msgid ""
"To demonstrate this, a new set of rules for a short strategy is provided "
"in a function called ``short_high``, which is similar to the previous set"
" of rules:"
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:224 a
#: bd6caaf6eff24d8eb1df7f702c4b385f
msgid "The rules in ``short_high`` will be traded on ``TSLA``:"
msgstr ""

#: ../../docs/source/notebooks/2. 1ccd97ef0c8e4e149bafd36885197878 Backtesting
#: Strategy.ipynb:245 a
msgid ""
"(Note, you can also retrieve bar data for another symbol by calling "
"`ExecContext#foreign "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.foreign>`__)"
msgstr ""

#: ../../docs/source/notebooks/2. 8c7bccbb721a4578b4a93d705f9cdc37 Backtesting
#: Strategy.ipynb:257 a
msgid "Running a Backtest"
msgstr ""

#: ../../docs/source/notebooks/2. 1e4decb04f8e411eb2f33aeff7978374 Backtesting
#: Strategy.ipynb:259 a
msgid ""
"To run a backtest, call the `backtest "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy.backtest>`__"
" method on the ``Strategy`` instance. Here is an example:"
msgstr ""

#: ../../docs/source/notebooks/2. 1fb89207758a4c27aed6982345725380 Backtesting
#: Strategy.ipynb:376 a
msgid ""
"That was fast! The ``backtest`` method will return an instance of "
"`TestResult "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.TestResult>`__."
" You can access various information and metrics about the backtest "
"through this instance. For example, to see the daily balances of the "
"portfolio, you can plot the market value using `Matplotlib "
"<https://matplotlib.org/>`__:"
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:434 a
#: bad06ec7f9454c2187065a4039363888
msgid ""
"You can also access the daily balance of each position that was held, the"
" trades that were made for every entry and exit, and all of the orders "
"that were placed:"
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:1339 a
#: e32772e5a7a94f0cbe3f7b37ad86a6bd
msgid ""
"Additionally, ``result.metrics_df`` contains a DataFrame of metrics "
"calculated using the returns of the backtest. `You can read about what "
"these metrics mean on the reference documentation "
"<https://www.pybroker.com/en/latest/reference/pybroker.eval.html#pybroker.eval.EvalMetrics>`__."
msgstr ""

#: ../../docs/source/notebooks/2. Backtesting Strategy.ipynb:1728 a
#: f13d3e7a6ff64b2dadef4ad42fe5f60e
msgid "Filtering Backtest Data"
msgstr ""

#: ../../docs/source/notebooks/2. 6c5838f886024dbc9983de3cc0025beb Backtesting
#: Strategy.ipynb:1730 a
msgid ""
"You can filter the data used for the backtest to only include specific "
"bars. For example, you can limit the strategy to trade only on Mondays by"
" filtering the data to only contain bars for Mondays:"
msgstr ""

#: ../../docs/source/notebooks/2. 2381a6f7790d4e02b2bbb65a9f4ae528 Backtesting
#: Strategy.ipynb:2074 a
msgid ""
"The data doesn’t need to be downloaded again from Yahoo Finance because "
"caching is enabled and the cached data only needs to be filtered."
msgstr ""

#: ../../docs/source/notebooks/2. 18cfd2ef672143fa9843a7aab29d340a Backtesting
#: Strategy.ipynb:2076 a
msgid ""
"You can also filter the data by time range, such as 9:30-10:30 AM, using "
"the `between_time "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy.backtest>`__"
" argument."
msgstr ""

#: ../../docs/source/notebooks/2. 8be61b096c9e42379df06543f7b7e16b Backtesting
#: Strategy.ipynb:2078 a
#, python-format
msgid ""
"Although the metrics earlier indicate that we have a profitable strategy,"
" we may be misled by randomness. `In the next notebook, we’ll discuss how"
" to use bootstrapping to further evaluate our trading strategies "
"<https://www.pybroker.com/en/latest/notebooks/3.%20Evaluating%20with%20Bootstrap%20Metrics.html>`__."
msgstr ""

