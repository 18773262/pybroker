# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Edward West
# This file is distributed under the same license as the PyBroker package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyBroker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-02 22:52-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../docs/source/notebooks/10. 014ee932b5e147f7a10843cfc5bba295 Rotational
#: Trading.ipynb:9
msgid "Rotational Trading"
msgstr ""

#: ../../docs/source/notebooks/10. Rotational Trading.ipynb:11
#: bd23fd6f27b546a18d32894889af9a58
msgid ""
"Rotational trading involves purchasing the best-performing assets while "
"selling underperforming ones. As you may have guessed, **PyBroker** is an"
" excellent tool for backtesting such strategies. So, let’s dive in and "
"get started with testing our rotational trading strategy!"
msgstr ""

#: ../../docs/source/notebooks/10. 70e3d73f272d45ed86ece494835c46fc Rotational
#: Trading.ipynb:33
msgid ""
"Our strategy will involve ranking and buying stocks with the highest "
"`price rate-of-change (ROC) "
"<https://www.investopedia.com/terms/p/pricerateofchange.asp>`__. To "
"start, we’ll define a 20-day ROC indicator using `TA-Lib "
"<https://github.com/TA-Lib/ta-lib-python>`__:"
msgstr ""

#: ../../docs/source/notebooks/10. 48746a5660b247cf9a8a9f6e04d76d94 Rotational
#: Trading.ipynb:57
msgid "Next, let’s define the rules of our strategy:"
msgstr ""

#: ../../docs/source/notebooks/10. Rotational Trading.ipynb:59
#: ca50b4b182864a56909d183ba0d6e0f2
msgid "Buy the two stocks with the highest 20-day ROC."
msgstr ""

#: ../../docs/source/notebooks/10. 21b83be536244fb293749dcb3e2021e9 Rotational
#: Trading.ipynb:60
#, python-format
msgid "Allocate 50% of our capital to each stock."
msgstr ""

#: ../../docs/source/notebooks/10. Rotational Trading.ipynb:61
#: f0c36139952c49b299355df05a81c369
msgid ""
"If either of the stocks is no longer ranked among the top five 20-day "
"ROCs, then we will liquidate that stock."
msgstr ""

#: ../../docs/source/notebooks/10. 10a9f8dfcb24480b836566bdc7fb5551 Rotational
#: Trading.ipynb:62
msgid "Trade these rules daily."
msgstr ""

#: ../../docs/source/notebooks/10. 315429766b584be585e16ea82c91ddc2 Rotational
#: Trading.ipynb:64
msgid "Let’s set up our config and some parameters for the above rules:"
msgstr ""

#: ../../docs/source/notebooks/10. 6d4fea219f3f400292f983c6b9164f62 Rotational
#: Trading.ipynb:112
msgid ""
"To proceed with our strategy, we will implement a ``rank`` function that "
"ranks each stock by their 20-day ROC in descending order, from highest to"
" lowest."
msgstr ""

#: ../../docs/source/notebooks/10. 4d993eaed2cf4eddbd2961701af11d2b Rotational
#: Trading.ipynb:146
msgid ""
"The ``top_symbols`` global parameter contains the symbols of the stocks "
"with the top five highest 20-day ROCs."
msgstr ""

#: ../../docs/source/notebooks/10. 5646aab7360d455589f6bf9167f7e2f3 Rotational
#: Trading.ipynb:148
msgid ""
"Now that we have a method for ranking stocks by their ROC, we can proceed"
" with implementing a ``rotate`` function to manage the rotational "
"trading."
msgstr ""

#: ../../docs/source/notebooks/10. 55a2e6b384264a8b96ee0398b96e56d5 Rotational
#: Trading.ipynb:176
msgid ""
"We liquidate the currently held stock if it is no longer ranked among the"
" top five 20-day ROCs. Otherwise, we rank all stocks by their 20-day ROC "
"and buy up to the top two ranked. For more information on ranking when "
"placing buy orders, see the `Ranking and Position Sizing notebook "
"<https://www.pybroker.com/en/latest/notebooks/4.%20Ranking%20and%20Position%20Sizing.html>`__."
msgstr ""

#: ../../docs/source/notebooks/10. Rotational Trading.ipynb:178
#: cde08ae885744371bee2e24c52e4247b
msgid ""
"We will use the `set_before_exec "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy.set_before_exec>`__"
" method to execute our ranking with ``rank`` before running the "
"``rotate`` function. For this backtest, we will use a universe of 10 "
"stocks:"
msgstr ""

