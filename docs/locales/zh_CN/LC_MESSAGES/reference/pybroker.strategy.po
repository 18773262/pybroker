# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Edward West
# This file is distributed under the same license as the PyBroker package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyBroker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-02 22:55-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/reference/pybroker.strategy.rst:2
#: 2528de94ce4643a18a17843522d6bfc9
msgid "pybroker.strategy module"
msgstr ""

#: 2bf1aff228cd4d9ca479ab97da213617 of pybroker.strategy:1
msgid "Contains implementation for backtesting trading strategies."
msgstr ""

#: 2e96d47df2e54924b5701e9254465d9e 782d247778854948a0750146f63b6807
#: fe6acb6b331d472a885e66d736cfef88 of pybroker.strategy.BacktestMixin:1
#: pybroker.strategy.TestResult:1 pybroker.strategy.WalkforwardMixin:1
msgid "Bases: :py:class:`object`"
msgstr ""

#: c35dbf6640104f6b9de236cf2214aa4e of pybroker.strategy.BacktestMixin:1
msgid "Mixin implementing backtesting functionality."
msgstr ""

#: 1b00b9b329ee47bc844238155bee756b of
#: pybroker.strategy.BacktestMixin.backtest_executions:1
msgid ""
"Backtests a ``set`` of :class:`.Execution`\\ s that implement trading "
"logic."
msgstr ""

#: 0113e827ea8f41dab6f7879008fdda5c 074877376dc540cebd26158eca35e5b6
#: 40028ca9003246b8a4028317d59f5fac 411697f40127403eab64430fd09ea6ee
#: 4c7b3b4f27964b689da4a0623ea6948c 9f6c51fb7c8a4e9686cd9477038dce09
#: c9213c089bbf45a68fa02cf9665b1b0e dd102e2301a64ebaaec143367e69acdf
#: f0db066bb89842b6b9c2e1f1d72857c0 of
#: pybroker.strategy.BacktestMixin.backtest_executions
#: pybroker.strategy.Strategy pybroker.strategy.Strategy.add_execution
#: pybroker.strategy.Strategy.backtest
#: pybroker.strategy.Strategy.set_after_exec
#: pybroker.strategy.Strategy.set_before_exec
#: pybroker.strategy.Strategy.set_pos_size_handler
#: pybroker.strategy.Strategy.walkforward
#: pybroker.strategy.WalkforwardMixin.walkforward_split
msgid "Parameters"
msgstr ""

#: 633debf1f77a4ec3bb0f6f19f5fa4ff3 of
#: pybroker.strategy.BacktestMixin.backtest_executions:4
msgid ":class:`pybroker.config.StrategyConfig`."
msgstr ""

#: 32fae905088b4c21b63ba829e8b2f873 of
#: pybroker.strategy.BacktestMixin.backtest_executions:5
msgid ":class:`.Execution`\\ s to run."
msgstr ""

#: 41c5b8f01ecf4dd8b698ef7b0ce23dd7 of
#: pybroker.strategy.BacktestMixin.backtest_executions:6
msgid ""
":class:`Mapping` of symbols to :class:`Mapping` of custom data that "
"persists for every bar during the :class:`.Execution`."
msgstr ""

#: 6fa7152654be4fb28ac39f0140cce46f of
#: pybroker.strategy.BacktestMixin.backtest_executions:9
msgid ""
":class:`Mapping` of :class:`pybroker.common.ModelSymbol` pairs to "
":class:`pybroker.common.TrainedModel`\\ s."
msgstr ""

#: 4facec643b24456e80f9f76d3536fe51 of
#: pybroker.strategy.BacktestMixin.backtest_executions:11
msgid ""
":class:`Mapping` of :class:`pybroker.common.IndicatorSymbol` pairs to "
":class:`pandas.Series` of :class:`pybroker.indicator.Indicator` values."
msgstr ""

#: 73c109128aba445789dfcd6b13c38edb of
#: pybroker.strategy.BacktestMixin.backtest_executions:15
msgid ":class:`pandas.DataFrame` of test data."
msgstr ""

#: c5e1119b5bf146ee82a7eaeb10daa8b9 of
#: pybroker.strategy.BacktestMixin.backtest_executions:16
msgid ":class:`pybroker.portfolio.Portfolio`."
msgstr ""

#: 77f45655b029432d992cc97db5796b8e of
#: pybroker.strategy.BacktestMixin.backtest_executions:17
msgid ""
":class:`Callable` that sets position sizes when placing orders for buy "
"and sell signals."
msgstr ""

#: 3df69af627a84f1aae8f3febcad3d59b of
#: pybroker.strategy.BacktestMixin.backtest_executions:19
msgid ":class:`Mapping` of symbols to exit dates."
msgstr ""

#: 09210c7799bf477e815522531ddc5057 of
#: pybroker.strategy.BacktestMixin.backtest_executions:20
msgid "Whether to enable trading fractional shares."
msgstr ""

#: 2898061c4fc6496fabcfc159023f18d9 4b79e5747f94455fbfa8a062d3405b1e
#: 9d27e16150b34f3088fdf2d0ce8e2d4d of
#: pybroker.strategy.BacktestMixin.backtest_executions:22
#: pybroker.strategy.Strategy.backtest:46
#: pybroker.strategy.Strategy.walkforward:52
msgid "Number of bars that need to pass before running the executions."
msgstr ""

#: 0fcfdf33b53144299010323ed46304f4 8cfaeadc373e46fa932bb0e2d93013e0
#: a08a5e8f936c4679a419673e43599a54 f1ec031850d14d9ab09a5baf539ac9b9 of
#: pybroker.strategy.BacktestMixin.backtest_executions
#: pybroker.strategy.Strategy.backtest pybroker.strategy.Strategy.walkforward
#: pybroker.strategy.WalkforwardMixin.walkforward_split
msgid "Returns"
msgstr ""

#: a56033796e69456d86718fb2c2c2bf23 of
#: pybroker.strategy.BacktestMixin.backtest_executions:25
msgid ":class:`.TestResult` of the backtest."
msgstr ""

#: a90d042810b7429a8ce46fe338eaf0a7 ce4ee148e95c41eca3fb8929fb20d4e6 of
#: pybroker.strategy.Execution:1 pybroker.strategy.WalkforwardWindow:1
msgid "Bases: :py:class:`~typing.NamedTuple`"
msgstr ""

#: 0fd708cbb01940c893954494171c8a22 of pybroker.strategy.Execution:1
msgid ""
"Represents an execution of a :class:`.Strategy`. Holds a reference to a "
":class:`Callable` that implements trading logic."
msgstr ""

#: e7692fc9284d467e9364b348086c1389 of pybroker.strategy.Execution:6
msgid "Unique ID."
msgstr ""

#: 2050f0ee041f4d778ad9f35d3172ee01 2ff38b03ce90488f943a48d4ee07b4b5
#: 324c0642c9a14eccbd8af6c978f48af7 37f168007038434399bb778e9e50761f
#: 4a725605c0154515a528f3a0fe1f4f3b 511772487d524919960ec8f76683c964
#: 5698f5be833947f7977e290b9389cba7 649f291219b64a02945e3e262af7a995
#: 7abb9a1c1c5f4188ac0c9614bfc139c3 8bd8bb2118b948d8a3edfa958fcde4b4
#: b0b89dc38cf34933982909cc77866554 b317b909c4cb4f21a93c8d25c8852297
#: b68afbe017da4091bc5ce4ebdcd6fc32 c733db79276c47b4a63e3db8c77447cb
#: d2bf8e9b7615458b9f910e41fa202ac8 edfd334befee4455964fbcbddff86a82 of
#: pybroker.strategy.Execution pybroker.strategy.TestResult
#: pybroker.strategy.WalkforwardWindow
msgid "type"
msgstr ""

#: 0308083de8cb47d18f8fce952cb184c1 of pybroker.strategy.Execution:8
msgid "int"
msgstr ""

#: dd6b40c3cd4c43a8b56ce6ecdbe7c9cd of pybroker.strategy.Execution:12
msgid "Ticker symbols used for execution of ``fn``."
msgstr ""

#: 98e8d6b5f4984cc5a8f42f320b6a6196 abcdd5a23d884aba8611b96728b5721d
#: c3bad7fdd0884a22aa90dc78514566b9 of pybroker.strategy.Execution:14
#: pybroker.strategy.Execution:27 pybroker.strategy.Execution:34
msgid "frozenset[str]"
msgstr ""

#: 638949506c7544aba2729cb3fc005e75 of pybroker.strategy.Execution:18
msgid "Implements trading logic."
msgstr ""

#: a28b49037e68418c8ce213688299eee9 of pybroker.strategy.Execution:20
msgid "Callable[[pybroker.context.ExecContext], None] | None"
msgstr ""

#: 03f710db5a6e41769b9216da1d1a2d37 of pybroker.strategy.Execution:24
msgid ""
"Names of :class:`pybroker.model.ModelSource`\\ s used for execution of "
"``fn``."
msgstr ""

#: ef224a0d122d486d9e29b56ed2f1f6e9 of pybroker.strategy.Execution:31
msgid ""
"Names of :class:`pybroker.indicator.Indicator`\\ s used for execution of "
"``fn``."
msgstr ""

#: e125539334c043e8a984d682ef2caf8d of pybroker.strategy.Strategy:1
msgid ""
"Bases: :py:class:`~pybroker.strategy.BacktestMixin`, "
":py:class:`~pybroker.eval.EvaluateMixin`, "
":py:class:`~pybroker.indicator.IndicatorsMixin`, "
":py:class:`~pybroker.model.ModelsMixin`, "
":py:class:`~pybroker.strategy.WalkforwardMixin`"
msgstr ""

#: 512c1cfc74954625862d7e7c8d00cc29 of pybroker.strategy.Strategy:1
msgid "Class representing a trading strategy to backtest."
msgstr ""

#: 607bc7c20630498393a0afb324702bff of pybroker.strategy.Strategy:3
msgid ""
":class:`pybroker.data.DataSource` or :class:`pandas.DataFrame` of "
"backtesting data."
msgstr ""

#: 037cc8015469420b9036376f9337857d of pybroker.strategy.Strategy:5
msgid "Starting date of the data to fetch from ``data_source`` (inclusive)."
msgstr ""

#: 57b6f3e77d604f22a7619b5e2ae36223 of pybroker.strategy.Strategy:7
msgid "Ending date of the data to fetch from ``data_source`` (inclusive)."
msgstr ""

#: 6715bd43d8b54ddc9e8c7a91a6ff7c1a of pybroker.strategy.Strategy:9
msgid "``Optional`` :class:`pybroker.config.StrategyConfig`."
msgstr ""

#: b4d2dd5e06034c9bbf290eeac47e0f84 of
#: pybroker.strategy.Strategy.add_execution:1
msgid "Adds an execution to backtest."
msgstr ""

#: 32143214c4244a2b880a485e57fa0d23 of
#: pybroker.strategy.Strategy.add_execution:3
msgid ""
":class:`Callable` invoked on every bar of data during the backtest and "
"passed an :class:`pybroker.context.ExecContext` for each ticker symbol in"
" ``symbols``."
msgstr ""

#: c07fe9ce2d6149dbb67220482be25ed1 of
#: pybroker.strategy.Strategy.add_execution:6
msgid ""
"Ticker symbols used to run ``fn``, where ``fn`` is called separately for "
"each symbol."
msgstr ""

#: 8b723606d6b24a979c18e189b6856161 of
#: pybroker.strategy.Strategy.add_execution:8
msgid ""
":class:`Iterable` of :class:`pybroker.model.ModelSource`\\ s to "
"train/load for backtesting."
msgstr ""

#: 7189e853b1924813a317f282a802499c of
#: pybroker.strategy.Strategy.add_execution:10
msgid ""
":class:`Iterable` of :class:`pybroker.indicator.Indicator`\\ s to compute"
" for backtesting."
msgstr ""

#: 71df3cd7edce4a6aba955db5063f67c5 of pybroker.strategy.Strategy.backtest:1
msgid ""
"Backtests the trading strategy by running executions that were added with"
" :meth:`.add_execution`."
msgstr ""

#: 016ef9f28ec244ac85f44c230008e1f9 of pybroker.strategy.Strategy.backtest:4
msgid ""
"Starting date of the backtest (inclusive). Must be within ``start_date`` "
"and ``end_date`` range that was passed to :meth:`.__init__`."
msgstr ""

#: ae2e24f3b3c145e9bec49fc1edb54eef of pybroker.strategy.Strategy.backtest:7
msgid ""
"Ending date of the backtest (inclusive). Must be within ``start_date`` "
"and ``end_date`` range that was passed to :meth:`.__init__`."
msgstr ""

#: 5de9760545b84b54b2e8eb612e9f2104 c645680ef82c456faabb638dc92c9c22 of
#: pybroker.strategy.Strategy.backtest:10
#: pybroker.strategy.Strategy.walkforward:16
msgid ""
"Formatted string that specifies the timeframe resolution of the "
"backtesting data. The timeframe string supports the following units:  - "
"``\"s\"``/``\"sec\"``: seconds - ``\"m\"``/``\"min\"``: minutes - "
"``\"h\"``/``\"hour\"``: hours - ``\"d\"``/``\"day\"``: days - "
"``\"w\"``/``\"week\"``: weeks - ``\"mo\"``/``\"month\"``: months  An "
"example timeframe string is ``1h 30m``."
msgstr ""

#: 1355e80bc2f649a78e4da752e105e709 b7b60a6bad1345c7b7f64e5a8da1176d of
#: pybroker.strategy.Strategy.backtest:10
#: pybroker.strategy.Strategy.walkforward:16
msgid ""
"Formatted string that specifies the timeframe resolution of the "
"backtesting data. The timeframe string supports the following units:"
msgstr ""

#: b63520a3b9fd48708d8fc0706a521c20 ce87530e1dde449b9eb079a3b5170b25 of
#: pybroker.strategy.Strategy.backtest:14
#: pybroker.strategy.Strategy.walkforward:20
msgid "``\"s\"``/``\"sec\"``: seconds"
msgstr ""

#: b323e25e4f01450abf3cd88b943225d1 ccd85572e85a44479e1e3405c3e2647b of
#: pybroker.strategy.Strategy.backtest:15
#: pybroker.strategy.Strategy.walkforward:21
msgid "``\"m\"``/``\"min\"``: minutes"
msgstr ""

#: 4c2061a4ef5e49d3afda5193e4e1226c 969a5b024bba44b1aeca5634b725b7f3 of
#: pybroker.strategy.Strategy.backtest:16
#: pybroker.strategy.Strategy.walkforward:22
msgid "``\"h\"``/``\"hour\"``: hours"
msgstr ""

#: 772bc213f2e0462a8ccefc09f6581925 d9792379f5cd4d25bb4a3314fa1e4b2c of
#: pybroker.strategy.Strategy.backtest:17
#: pybroker.strategy.Strategy.walkforward:23
msgid "``\"d\"``/``\"day\"``: days"
msgstr ""

#: 9c55456c74354c75abb57bcd89e170d9 f1a5be1b373d4277b95233347f269f52 of
#: pybroker.strategy.Strategy.backtest:18
#: pybroker.strategy.Strategy.walkforward:24
msgid "``\"w\"``/``\"week\"``: weeks"
msgstr ""

#: 507cca076d724ef39591d25196868f86 790556efd52f484b86ca52728d156dcc of
#: pybroker.strategy.Strategy.backtest:19
#: pybroker.strategy.Strategy.walkforward:25
msgid "``\"mo\"``/``\"month\"``: months"
msgstr ""

#: b620417aba72448e9b9570e2c4d8d44d ba90144e07cd44fda73e53f2ee68e858 of
#: pybroker.strategy.Strategy.backtest:21
#: pybroker.strategy.Strategy.walkforward:27
msgid "An example timeframe string is ``1h 30m``."
msgstr ""

#: 7809f44de6724e13bc059951e8f6e850 8e7d9e428e4e4b22b0a62d734e61baa3 of
#: pybroker.strategy.Strategy.backtest:22
#: pybroker.strategy.Strategy.walkforward:28
msgid ""
"``tuple[str, str]`` of times of day e.g. ('9:30', '16:00') used to filter"
" the backtesting data (inclusive)."
msgstr ""

#: bdf7178d1f81400c8d8a7bcae250d5a1 d75845fb8c0445cdba33f994886e456e of
#: pybroker.strategy.Strategy.backtest:25
#: pybroker.strategy.Strategy.walkforward:31
msgid ""
"Days (e.g. ``\"mon\"``, ``\"tues\"`` etc.) used to filter the backtesting"
" data."
msgstr ""

#: c2251a74c5ed4647b451beb3728ec8c2 ce29f24b6b244b46836368fc1ec5d536
#: de21928c69a241ee94555a58729a5907 of pybroker.strategy.Strategy.backtest:27
#: pybroker.strategy.Strategy.walkforward:33
#: pybroker.strategy.WalkforwardMixin.walkforward_split:9
msgid ""
"Number of bars in the future of the target prediction. For example, "
"predicting returns for the next bar would have a ``lookahead`` of ``1``. "
"This quantity is needed to prevent training data from leaking into the "
"test boundary."
msgstr ""

#: 4fdd325a59b54e8b9cb662141040e47e 7c7fcddc8a4243a1a519eb05026a9044 of
#: pybroker.strategy.Strategy.backtest:31
#: pybroker.strategy.Strategy.walkforward:37
#, python-format
msgid ""
"Amount of :class:`pybroker.data.DataSource` data to use for training, "
"where the max ``train_size`` is ``1``. For example, a ``train_size`` of "
"``0.9`` would result in 90% of data being used for training and the "
"remaining 10% of data being used for testing."
msgstr ""

#: 137b048198e34c3a88094878fc412912 7d3f4f0368d6409b8234922dfc6f9eca of
#: pybroker.strategy.Strategy.backtest:36
#: pybroker.strategy.Strategy.walkforward:42
msgid ""
"Whether to randomly shuffle the data used for training. Defaults to "
"``False``. Disabled when model caching is enabled via "
":meth:`pybroker.cache.enable_model_cache`."
msgstr ""

#: 3373c149674140d1ab588a443cb2ac1b c1df9b3be1d544e3848d06b13698e529 of
#: pybroker.strategy.Strategy.backtest:39
#: pybroker.strategy.Strategy.walkforward:45
msgid ""
"Whether to compute randomized bootstrap evaluation metrics. Defaults to "
"``False``."
msgstr ""

#: 1ffcaca2292d4a948dec3aa9b58aedb3 5c9c1617e87543d780077dc46c43402a of
#: pybroker.strategy.Strategy.backtest:41
#: pybroker.strategy.Strategy.walkforward:47
msgid ""
"If ``True``, :class:`pybroker.indicator.Indicator` data is computed "
"serially. If ``False``, :class:`pybroker.indicator.Indicator` data is "
"computed in parallel using multiple processes. Defaults to ``False``."
msgstr ""

#: 02b0f61b89a14eba84977e1df05a033b d90488c0f2164815b9fd151b93ca862f of
#: pybroker.strategy.Strategy.backtest:49
#: pybroker.strategy.Strategy.walkforward:55
msgid ""
":class:`.BacktestResult` containing portfolio balances, order history, "
"and evaluation metrics."
msgstr ""

#: dd8116021a2842ada356cc7f4d9ade7a of
#: pybroker.strategy.Strategy.clear_executions:1
msgid "Clears executions that were added with :meth:`.add_execution`."
msgstr ""

#: 7d4523eb9edd46809a1d937d523eeb5a of
#: pybroker.strategy.Strategy.set_after_exec:1
msgid ""
":class:`Callable[[Mapping[str, ExecContext]]` that runs after all "
"execution functions."
msgstr ""

#: 38fb76845eec4093bc07eadcf7b6398b eff42694368445be85a751a0784fdfd2 of
#: pybroker.strategy.Strategy.set_after_exec:4
#: pybroker.strategy.Strategy.set_before_exec:4
msgid ""
":class:`Callable` that takes a :class:`Mapping` of all ticker symbols to "
":class:`ExecContext`\\ s."
msgstr ""

#: 527f2a6096024e95b5e1b530bcca8873 of
#: pybroker.strategy.Strategy.set_before_exec:1
msgid ""
":class:`Callable[[Mapping[str, ExecContext]]` that runs before all "
"execution functions."
msgstr ""

#: 73937fa949514fd08d6ddd78569439e8 of
#: pybroker.strategy.Strategy.set_pos_size_handler:1
msgid ""
"Sets a :class:`Callable` that determines position sizes to use for buy "
"and sell signals."
msgstr ""

#: c2825aa8cde0454a8397437d1262c874 of
#: pybroker.strategy.Strategy.set_pos_size_handler:4
msgid ""
":class:`Callable` invoked before placing orders for buy and sell signals,"
" and is passed a :class:`pybroker.context.PosSizeContext`."
msgstr ""

#: 51b7da6f67174d4b964cdbe84e47beb5 of
#: pybroker.strategy.Strategy.set_slippage_model:1
msgid "Sets :class:`pybroker.slippage.SlippageModel`."
msgstr ""

#: 3b96889c9d1f40698c05eb762097823f of pybroker.strategy.Strategy.walkforward:1
msgid ""
"Backtests the trading strategy using `Walkforward Analysis "
"<https://www.pybroker.com/en/latest/notebooks/6.%20Training%20a%20Model.html"
"#Walkforward-Analysis>`_. Backtesting data supplied by the "
":class:`pybroker.data.DataSource` is divided into ``windows`` number of "
"equal sized time windows, with each window split into train and test data"
" as specified by ``train_size``. The backtest \"walks forward\" in time "
"through each window, running executions that were added with "
":meth:`.add_execution`."
msgstr ""

#: 4b8053a5225546cd8dc02c77824d5dcb 83843d533f3549dbb834cdc07af3e131 of
#: pybroker.strategy.Strategy.walkforward:9
#: pybroker.strategy.WalkforwardMixin.walkforward_split:8
msgid "Number of walkforward time windows."
msgstr ""

#: 3c054aa4632a412aad213a70435bf47e of
#: pybroker.strategy.Strategy.walkforward:10
msgid ""
"Starting date of the Walkforward Analysis (inclusive). Must be within "
"``start_date`` and ``end_date`` range that was passed to "
":meth:`.__init__`."
msgstr ""

#: 914e7e315fdb41f5b23e889c935ad2c1 of
#: pybroker.strategy.Strategy.walkforward:13
msgid ""
"Ending date of the Walkforward Analysis (inclusive). Must be within "
"``start_date`` and ``end_date`` range that was passed to "
":meth:`.__init__`."
msgstr ""

#: 051f84e137ed4eee8ed3f404456f53fb of pybroker.strategy.TestResult:1
msgid "Contains the results of backtesting a :class:`.Strategy`."
msgstr ""

#: 2e2ce47b5db1426d8bb84f6017ac5bd2 of pybroker.strategy.TestResult:5
msgid "Starting date of backtest."
msgstr ""

#: 9648743d53e4485ca05310e18ea088bd 9d494d3bf2634fd9b0e2ab1f59ee16ed of
#: pybroker.strategy.TestResult:7 pybroker.strategy.TestResult:13
msgid "datetime.datetime"
msgstr ""

#: 4aad488e8a7a4e369c9b941876da3821 of pybroker.strategy.TestResult:11
msgid "Ending date of backtest."
msgstr ""

#: 28a88831c83a43c092221b450cd2ca69 of pybroker.strategy.TestResult:17
msgid ""
":class:`pandas.DataFrame` of :class:`pybroker.portfolio.Portfolio` "
"balances for every bar."
msgstr ""

#: 33c0b38ecbd14aa7acdf0b22b481b285 691e81ff9c85489098acf49db4fe6364
#: a52bcda83f194a17b4f1894c98dcb694 c87f518fa56940d6b62671843cc3fe46
#: ed116a4a44fa4cde92e31b9f9293ffc1 of pybroker.strategy.TestResult:20
#: pybroker.strategy.TestResult:27 pybroker.strategy.TestResult:33
#: pybroker.strategy.TestResult:39 pybroker.strategy.TestResult:51
msgid "pandas.core.frame.DataFrame"
msgstr ""

#: f3d77baecfc8410ca5fff13dd4d72b50 of pybroker.strategy.TestResult:24
msgid ""
":class:`pandas.DataFrame` of :class:`pybroker.portfolio.Position` "
"balances for every bar."
msgstr ""

#: 8c373e3e59c145aab1bec297d8eeb87b of pybroker.strategy.TestResult:31
msgid ":class:`pandas.DataFrame` of all orders that were placed."
msgstr ""

#: 3aece21a1060476d9b27c5fe28e5fd3b of pybroker.strategy.TestResult:37
msgid ":class:`pandas.DataFrame` of all trades that were made."
msgstr ""

#: 5aa4bb36599441a090a1597de77bd358 of pybroker.strategy.TestResult:43
msgid "Evaluation metrics."
msgstr ""

#: 4f8de61d72124be9afbdbd23f4b47a77 of pybroker.strategy.TestResult:45
msgid "pybroker.eval.EvalMetrics"
msgstr ""

#: c4f4a38ee3994fcf8b2f9f7cabb86965 of pybroker.strategy.TestResult:49
msgid ":class:`pandas.DataFrame` of evaluation metrics."
msgstr ""

#: 4cad92b723be4055bf713890a51424c2 of pybroker.strategy.TestResult:55
msgid "Randomized bootstrap evaluation metrics."
msgstr ""

#: a242001eb9d24539bbd1d531be5a17f5 of pybroker.strategy.TestResult:57
msgid "pybroker.eval.BootstrapResult | None"
msgstr ""

#: 14704cd221cf4c1199cd854917c55f40 of pybroker.strategy.WalkforwardMixin:1
msgid ""
"Mixin implementing logic for `Walkforward Analysis "
"<https://www.pybroker.com/en/latest/notebooks/6.%20Training%20a%20Model.html"
"#Walkforward-Analysis>`_."
msgstr ""

#: 01f754c1334f43c3bf011bb3ad8af18f of
#: pybroker.strategy.WalkforwardMixin.walkforward_split:1
msgid ""
"Splits a :class:`pandas.DataFrame` containing data for multiple ticker "
"symbols into an :class:`Iterator` of train/test time windows for "
"`Walkforward Analysis "
"<https://www.pybroker.com/en/latest/notebooks/6.%20Training%20a%20Model.html"
"#Walkforward-Analysis>`_."
msgstr ""

#: 98c9f291dd2e4ed29c4937e87693e535 of
#: pybroker.strategy.WalkforwardMixin.walkforward_split:6
msgid ""
":class:`pandas.DataFrame` of data to split into train/test windows for "
"Walkforward Analysis."
msgstr ""

#: 2fdc229d981a4aa98d427ebd924bc539 of
#: pybroker.strategy.WalkforwardMixin.walkforward_split:13
#, python-format
msgid ""
"Amount of data in ``df`` to use for training, where the max "
"``train_size`` is ``1``. For example, a ``train_size`` of ``0.9`` would "
"result in 90% of data in ``df`` being used for training and the remaining"
" 10% of data being used for testing."
msgstr ""

#: 1293bf0d0e564952bbb6a2f1c0a4ff45 of
#: pybroker.strategy.WalkforwardMixin.walkforward_split:17
msgid ""
"Whether to randomly shuffle the data used for training. Defaults to "
"``False``."
msgstr ""

#: 22697f6c4ecc4d3690170844a00bdb87 of
#: pybroker.strategy.WalkforwardMixin.walkforward_split:20
msgid ""
":class:`Iterator` of :class:`.WalkforwardWindow`\\ s containing train and"
" test data."
msgstr ""

#: 17412f76a47846b7a0abf2f090003548 of pybroker.strategy.WalkforwardWindow:1
msgid ""
"Contains ``train_data`` and ``test_data`` of a time window used for "
"`Walkforward Analysis "
"<https://www.pybroker.com/en/latest/notebooks/6.%20Training%20a%20Model.html"
"#Walkforward-Analysis>`_."
msgstr ""

#: 45131825fbf0485785737a892bf8baf2 of pybroker.strategy.WalkforwardWindow:7
msgid "Train data."
msgstr ""

#: 4ec138cccc9949b1abe59a2d38eacc4a ed589e96f7c94334a27314c5a70ef413 of
#: pybroker.strategy.WalkforwardWindow:9 pybroker.strategy.WalkforwardWindow:15
msgid "numpy.ndarray[Any, numpy.dtype[numpy.int64]]"
msgstr ""

#: 33ada00455f047489f6c4aa98bbab492 of pybroker.strategy.WalkforwardWindow:13
msgid "Test data."
msgstr ""

#~ msgid "numpy.ndarray[Any, numpy.dtype[numpy.int32]]"
#~ msgstr ""

